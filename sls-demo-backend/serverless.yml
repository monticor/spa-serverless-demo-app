

service: sls-demo-backend


provider:
  name: aws
  environment:
    GW_URL: { "Fn::Join" : ["", [ "https://", { "Ref" : "ApiGatewayRestApi" }, ".execute-api.${self:custom.region}.amazonaws.com/dev" ] ]  }
custom:
  BucketName: spa-serverless-app-demo
  region: us-east-1

functions:
  backend:
    role: DemoServerlessBackEndRole
    handler: handler.handler
    runtime: nodejs6.10
    events:
       - http:
            path: /ride
            cors: true
            method: post
            authorizer: ${cf:sls-demo-backend-cognito-dev.CognitoARN} # need to add variable for stage /dev

  UpdateBucketConfigAPI:
    role: DemoBucketAccessRole
    handler: update.handler
    runtime: python2.7


resources:
  Resources:
    DemoServerlessBackEndRole:
      Type: AWS::IAM::Role
      Properties:
        ManagedPolicyArns:
                        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        Path: /DemoApp/
        AssumeRolePolicyDocument:
          Statement:
            -
              Effect: Allow
              Principal:
                Service: lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          -
            PolicyName: DemoBackEnd
            PolicyDocument:
              Statement:
                -
                  Sid: DynamoDB
                  Effect: Allow
                  Action:
                      - dynamodb:Query
                      - dynamodb:Scan
                      - dynamodb:GetItem
                      - dynamodb:PutItem
                      - dynamodb:UpdateItem
                      - dynamodb:DeleteItem
                  Resource:
                      - Fn::Join:
                          - ':'
                          - - 'arn:aws:dynamodb'
                            - Ref: 'AWS::Region'
                            - Ref: 'AWS::AccountId'
                            - 'table/Rides'

    #This custom resource passes the congnito userpool info created in template as input to the UpdateConfigFunction
    UpdateConfig:
      Properties:
        ServiceToken: { "Fn::GetAtt": ["UpdateBucketConfigAPILambdaFunction", "Arn" ] }
        Region:
            Ref: "AWS::Region"
      Type: "Custom::ConfigFile"

    DemoBucketAccessRole:
      Type: AWS::IAM::Role
      Properties:
        ManagedPolicyArns:
                        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        Path: /DemoApp/
        AssumeRolePolicyDocument:
          Statement:
            -
              Effect: Allow
              Principal:
                Service: lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          -
            PolicyName: DemoBackEnd
            PolicyDocument:
              Statement:
                -
                  Sid: ConfigBucketWriteAccess
                  Effect: Allow
                  Action:
                    - "s3:PutObject"
                    - "s3:PutObjectAcl"
                    - "s3:PutObjectVersionAcl"
                  Resource:
                    - "arn:aws:s3:::${self:custom.BucketName}/*"

#
#
#    UpdateConfig:
#        Type: "Custom::ConfigFile"
#        Properties:
#          ServiceToken: { Fn::GetAtt: [ UpdateConfigFunction, Arn ] }
#          Bucket: ${self:custom.BucketName}
#          InvokeUrl:
#            Fn::Join:
#              - ""
#              - - "https://"
#                - !Ref WildRydesApi
#                - ".execute-api."
#                - !Ref AWS::Region
#                - ".amazonaws.com/prod"
#
#
#    UpdateConfigFunction:
#    Type: AWS::Lambda::Function
#    Properties:
#      Description: Adds the API endpoint to the config.js file
#      Handler: index.handler
#      Runtime: python2.7
#      Role: !GetAtt UpdateConfigRole.Arn
#      Timeout: 120
#      Code:
#        ZipFile: |
#          import json
#          import boto3
#          import cfnresponse
#
#          s3 = boto3.resource('s3')
#
#          def create(properties, physical_id):
#            bucket = properties['Bucket']
#            config_object = s3.Object(bucket, 'js/config.js').get()
#            config_data = config_object["Body"].read()
#            config_data = config_data.replace("Base URL of your API including the stage", properties["InvokeUrl"])
#            config = s3.Object(bucket,'js/config.js')
#            config.put(Body=config_data)
#            return cfnresponse.SUCCESS, None
#
#          def update(properties, physical_id):
#            return create(properties, physical_id)
#
#          def delete(properties, physical_id):
#            return cfnresponse.SUCCESS, physical_id
#
#          def handler(event, context):
#            print "Received event: %s" % json.dumps(event)
#
#            status = cfnresponse.FAILED
#            new_physical_id = None
#
#            try:
#              properties = event.get('ResourceProperties')
#              physical_id = event.get('PhysicalResourceId')
#
#              status, new_physical_id = {
#                'Create': create,
#                'Update': update,
#                'Delete': delete
#              }.get(event['RequestType'], lambda x, y: (cfnresponse.FAILED, None))(properties, physical_id)
#            except Exception as e:
#              print "Exception: %s" % e
#              status = cfnresponse.FAILED
#            finally:
#              cfnresponse.send(event, context, status, {}, new_physical_id)
#


#  # updates config.js in SPA with API gateway URL.  se the GW_URL above as an process.env.GW_URL environment variable to update the config...need to change index.handler code
#  UpdateConfigFunction:
#    role:
#    handler: index.handler
#    runtime: python2.7
#
#resources:
#  Resources:
#    TcccServerlessBackEndRole:
#      Type: AWS::IAM::Role
#      Properties:
#        ManagedPolicyArns:
#                        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
#        Path: /TcccDemoApp/
#        AssumeRolePolicyDocument:
#          Statement:
#            -
#              Effect: Allow
#              Principal:
#                Service: lambda.amazonaws.com
#              Action: sts:AssumeRole
#        Policies:
#          -
#            PolicyName: TcccBackEnd
#            PolicyDocument:
#              Statement:
#                -
#                  Sid: DynamoDB
#                  Effect: Allow
#                  Action:
#                      - dynamodb:Query
#                      - dynamodb:Scan
#                      - dynamodb:GetItem
#                      - dynamodb:PutItem
#                      - dynamodb:UpdateItem
#                      - dynamodb:DeleteItem
#                  Resource:
#                      - Fn::Join:
#                          - ':'
#                          - - 'arn:aws:dynamodb'
#                            - Ref: 'AWS::Region'
#                            - Ref: 'AWS::AccountId'
#                            - 'table/Rides'
#
#    Rides:
#      Type: 'AWS::DynamoDB::Table'
#      Properties:
#        AttributeDefinitions:
#          -
#            AttributeName: RideId
#            AttributeType: S
#        KeySchema:
#          -
#            AttributeName: RideId
#            KeyType: HASH
#        ProvisionedThroughput:
#          ReadCapacityUnits: 1
#          WriteCapacityUnits: 1
#        TableName: Rides







